openapi: 3.0.0
info:
  title: My Rest API
  description: My description
  version: '1.0'
servers:
  - url: http://127.0.0.1:5555
    description: The Local Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    'unauth':
      description: Unauthorized, meaning Bearer Token is invalid.

    '200':
      description: Success.

    '500':
      description: Internal server error.
      # content:
      #   application/json:
      #     schema:
      #       type: object
      #       properties:
      #         error:
      #           type: string
      #     examples:
      #       default:
      #         value:
      #           error: Couldn't access database.

    '409user':
      description: Conflict. User already exists.

    '403':
      description: Forbidden. Content, trying to be accessed, does not belong to this user.

security:
  - bearerAuth: []

paths:
  /login:
    post:
      description: Check credentials and return a JWT.
      tags:
        - login
        - user

      security: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            examples:
              default:
                value:
                  email: james.bond@example.com
                  password: bondsVerySecretPass

      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
              examples:
                default:
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY4OTU3ODIwN30.Q28AzLRnYrbqa_WDiJpMBS26TRTSVm30OlhzuiFXBxk

        '401':
          description: Incorrect credentials.
        '500':
          $ref: '#/components/responses/500'

  /user:
    post:
      description: Create a user.
      tags:
        - user

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - userData
              properties:
                email:
                  type: string
                password:
                  type: string
                userData:
                  type: object
                  description: Object can contain any number of any type of properties.

            examples:
              default:
                value:
                  email: james.bond@example.com
                  password: bondsVerySecretPass
                  userData:
                    name: James Bond
                    age: confidential
                    address: confidential

      responses:
        '401':
          $ref: '#/components/responses/unauth'
        '200':
          $ref: '#/components/responses/200'
        '409':
          $ref: '#/components/responses/409user'
        '500':
          $ref: '#/components/responses/500'

    get:
      description: Fetch the userData object.
      tags:
        - user

      responses:
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/unauth'
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userData:
                    type: object
                    description: The object contains any property, put into it at user creation.
              examples:
                default:
                  value:
                    userData:
                      name: James Bond
                      age: confidential
                      address: confidential

  /ticker:
    get:
      description: List all tickers. Their latest price is included.
      tags:
        - ticker

      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          examples:
            default:
              value: 100
          description: Limit the array size returned. Default is 100.
        - in: query
          name: offset
          schema:
            type: integer
          examples:
            default:
              value: 0
          description: When to start counting towards the limit and returning values.

      responses:
        '401':
          $ref: '#/components/responses/unauth'

        '500':
          $ref: '#/components/responses/500'

        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    description: An array of the tickers
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        symbol:
                          type: string
                        price:
                          type: number

              examples:
                default:
                  value:
                    result:
                      - id: 1
                        symbol: GOOG
                        price: 117.21
                      - id: 2
                        symbol: APPL
                        price: 12.86

  /user/ticker:
    get:
      description: List tickers linked to user. Their latest price is included.
      tags:
        - ticker

      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          examples:
            default:
              value: 100
          description: Limit the array size returned. Default is 100.
        - in: query
          name: offset
          schema:
            type: integer
          examples:
            default:
              value: 0
          description: When to start counting towards the limit and returning values.

      responses:
        '401':
          $ref: '#/components/responses/unauth'

        '500':
          $ref: '#/components/responses/500'

        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    description: An array of the tickers linked to the user
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        symbol:
                          type: string
                        price:
                          type: number

              examples:
                default:
                  value:
                    result:
                      - id: 1
                        symbol: GOOG
                        price: 117.21
                      - id: 2
                        symbol: APPL
                        price: 12.86

  /user/ticker/{tickerId}:
    post:
      description: Link a ticker to the user
      tags:
        - ticker

      parameters:
        - name: tickerId
          in: path
          description: The id of a ticker to link to user.
          required: true
          schema:
            type: integer
            format: int64
          examples:
            default:
              value: 1

      responses:
        '401':
          $ref: '#/components/responses/unauth'
        '200':
          $ref: '#/components/responses/200'
        '409':
          description: Conflict. Ticker already linked to user.
        '404':
          description: Ticker not found.

    delete:
      description: Delete a user's ticker.
      tags:
        - ticker

      parameters:
        - name: tickerId
          in: path
          description: The id of a ticker that the user owns.
          required: true
          schema:
            type: integer
            format: int64
          examples:
            default:
              value: 1

      responses:
        '200':
          $ref: '#/components/responses/200'
        '500':
          $ref: '#/components/responses/500'
        '404':
          description: Ticker not found to be linked to user.
        '401':
          $ref: '#/components/responses/unauth'
